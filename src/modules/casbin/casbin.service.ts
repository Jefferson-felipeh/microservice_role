// src/casbin/casbin.provider.ts
import { HttpException, Injectable, OnModuleInit } from '@nestjs/common';
import { Enforcer, newEnforcer, newModelFromString } from 'casbin';
import { SequelizeAdapter } from 'casbin-sequelize-adapter';

//Service repons√°vel por construir o adapter, referenciar o banco de dados no adapter, 
//e obter os dados das regras que ser√£o especificadas no banco de dados atravez dos dados do model.conf_
@Injectable()
export class CasBinService implements OnModuleInit {
  private enforcer: Enforcer;
  dataUserCreated;

  //Executa o bloco sempre que o m√≥dulo de casbin for iniciado_
  //Basicamente √© ele que inicia o casbin na aplica√ß√£o criando o adapter 
  //e especificando as regras que o BD segur√° no mode.conf_
  onModuleInit() {
    this.casbinInitEnforcer();
    // this.seedDefaultPolicies();
  }

  //O banco de dados casbin_rule precisa ter regras definidas, ou seja, dados definidos que agrupam
  //as regras de politica de autentica√ß√£o do casbin:
  //1- Cadastrar as regras da pol√≠tica de autentica√ß√£o do casbin na entidade casbin_rule;
  //2- Associar o usu√°rio ao grupo de regras;
  //3- verificar se o usu√°rio possue tais permiss√µes;
  async seedDefaultPolicies() {
    const enforcer = await this.getEnforce();

    const defaultPolicies = [
      ['admin', '/role/create-role', 'post'],
      ['user', '/role/list', 'get'],
    ];

    for (const [sub, obj, act] of defaultPolicies) {
      const exists = await enforcer.hasPolicy(sub, obj, act);
      if (!exists) {
        await enforcer.addPolicy(sub, obj, act);
      }
    }

    await enforcer.savePolicy(); // Salva no banco (casbin_rule)
  }

  //Iniciando o casbin_
  private async casbinInitEnforcer() {
    // Conte√∫do do model.conf em string
    //Ao inves de criar o arquivo model.conf, estou adicionando o conteudo atravez desse texto,
    //ele contem as regras espec√≠ficas para o banco de dados_
    //Modelo RBAC_
    //Define a estrutura da politica de autoriza√ß√£o do casbin_
    const modelText = `
      [request_definition]
      r = sub, obj, act

      [policy_definition]
      p = sub, obj, act

      [role_definition]
      g = _, _

      [policy_effect]
      e = some(where (p.eft == allow))

      [matchers]
      m = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act
    `;

    //Configurando o adapter, o adapter s√£o as credencias e informa√ß√µes necess√°rias para conex√£o com o BD_
    const adapter = await SequelizeAdapter.newAdapter({
      //Aqui definimos as politicas do para conex√£o com o banco de dados e inicializar o casbin_
      dialect: 'postgres',
      port: 5432,
      host: 'localhost',
      database: 'microservice_users',
      username: 'jeffersons',
      password: 'JFS0211@ti'
    });

    const model = newModelFromString(modelText);

    //referenciando as regras com o banco de dados_
    this.enforcer = await newEnforcer(model, adapter);

    //Essa comando √© usado para carregar todas as pol√≠ticas de autoriza√ß√£o do casbin direto 
    //do banco de dados para a mem√≥ria do enforcer_
    //O casbin mantem as politicas de autoriza√ß√£o em mem√≥ria dentro do enforcer, isso garante desempenho
    //ao verificar permissoes.
    //Por exemplo, se as pol√≠ticas de autoriza√ß√£o do banco de dados mudar, o enforcer n√£o vai saber automaticamente,
    //dessa forma ser√° usado esse comando para dizer ao enforcer e armazenar em mem√≥ria as pol√≠ticas de autoriza√ß√£o
    //do banco atuais, dizendo, oh, houve autera√ß√£o do nas pol√≠ticas do casbin no banco de dados,
    //use o comando  loadPolicy() para carregar ou atualizar todas as regras do banco de dados para garantir 
    //que estou com as pol√≠ticas mais atualizadas_
    this.enforcer.loadPolicy();

    return this.enforcer;
  }

  async getDataUserCasbin(dataUser) {
    console.log(dataUser.userid)
    if (!dataUser) throw new HttpException('Dados do usu√°rio n√£o obtidos!', 403);

    await this.enforcer.addGroupingPolicy(dataUser.userid,'admin');//O usu√°rio criado pertencer√° ao grupo de regras de role user;
    //Ap√≥s criar as regras da pol√≠tica de autentica√ß√£o e adiciona-las na entidade casbin_rule,
    //iremos, ao criar o usu√°rio, atribuir no grupo de regra espec√≠fica_
  }

  async getEnforce(): Promise<Enforcer> {
    if (!this.enforcer) {
      console.log('üöÄ Inicializando o enforcer on-demand...');
      await this.casbinInitEnforcer();
    }

    return this.enforcer;
  }

}